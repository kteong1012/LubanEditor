
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.test
{

public abstract class DemoD3 :  test.DemoDynamic 
{
    public DemoD3()
    {
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "DemoD3";

    private int _typeIndex = -1;
    private int TypeIndex => _typeIndex;
    private static string[] Types = new string[]
    {
        "DemoE1",
        "test.login.RoleInfo",
    };
    private static string[] TypeAlias = new string[]
    {
        "DemoE1",
        "RoleInfo",
    };

    public new static DemoD3 Create(string type)
    {
        switch (type)
        {
            case "test.DemoE1":   
            case "DemoE1":
            {
                var obj = new test.DemoE1();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "test.login.RoleInfo":
            {
                var obj = new test.login.RoleInfo();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderDemoD3(ref DemoD3 obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        var index = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        if (obj.TypeIndex != index)
        {
            obj = Create(Types[index]);
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
    }
    public static DemoD3 LoadJsonDemoD3(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        DemoD3 obj;
        switch (type)
        {
            case "test.DemoE1":   
            case "DemoE1":
            {
                obj = new test.DemoE1(); 
                obj._typeIndex = Array.IndexOf(Types, "DemoE1");
                break;
            }
            case "test.login.RoleInfo":
            {
                obj = new test.login.RoleInfo(); 
                obj._typeIndex = Array.IndexOf(Types, "test.login.RoleInfo");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDemoD3(DemoD3 _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int x3;

    public override string ToString()
    {
        return "{ "
        + "x1:" + x1 + ","
        + "x3:" + x3 + ","
        + "}";
    }
}

}

