
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.test
{

public abstract class RefDynamicBase :  Luban.EditorBeanBase 
{
    public RefDynamicBase()
    {
    }
    public abstract string GetTypeStr();

    private int _typeIndex = -1;
    private int TypeIndex => _typeIndex;
    private static string[] Types = new string[]
    {
        "RefBean",
    };
    private static string[] TypeAlias = new string[]
    {
        "RefBean",
    };

    public static RefDynamicBase Create(string type)
    {
        switch (type)
        {
            case "test.RefBean":   
            case "RefBean":
            {
                var obj = new test.RefBean();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderRefDynamicBase(ref RefDynamicBase obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        var index = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        if (obj.TypeIndex != index)
        {
            obj = Create(Types[index]);
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
    }
    public static RefDynamicBase LoadJsonRefDynamicBase(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        RefDynamicBase obj;
        switch (type)
        {
            case "test.RefBean":   
            case "RefBean":
            {
                obj = new test.RefBean(); 
                obj._typeIndex = Array.IndexOf(Types, "RefBean");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonRefDynamicBase(RefDynamicBase _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public int x;

    public override string ToString()
    {
        return "{ "
        + "x:" + x + ","
        + "}";
    }
}

}

