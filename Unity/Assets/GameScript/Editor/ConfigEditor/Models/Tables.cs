
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEditor;
using SimpleJSON;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;

namespace editor.cfg
{
    public interface IConfigEditorTable
    {
        void Load();
        void Save();
        void OnGUI();
        void Sort();
        bool IsLoaded { get; }
        void ResolveRef(Tables tables);
    }

    public partial class Tables
    {
        private const string _jsonConfigDirPath = "Config/Datas/DataJson";
        private string _currentTable = "";
        private Dictionary<string, IConfigEditorTable> _tables;
        private string[] _tableNames;

        public string CurrentTable => _currentTable;

        public Tables(System.Func<string, string> pathFunc)
        {
            _tables = new Dictionary<string, IConfigEditorTable>();
            var path = string.Empty;
            path = pathFunc("ai_tbblackboard");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("ai.TbBlackboard", new ai.TbBlackboard(path));
            }
            path = pathFunc("ai_tbbehaviortree");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("ai.TbBehaviorTree", new ai.TbBehaviorTree(path));
            }
            path = pathFunc("common_tbglobalconfig");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("common.TbGlobalConfig", new common.TbGlobalConfig(path));
            }
            path = pathFunc("item_tbitem");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("item.TbItem", new item.TbItem(path));
            }
            path = pathFunc("l10n_tbl10ndemo");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("l10n.TbL10NDemo", new l10n.TbL10NDemo(path));
            }
            path = pathFunc("l10n_tbpatchdemo");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("l10n.TbPatchDemo", new l10n.TbPatchDemo(path));
            }
            path = pathFunc("tag_tbtesttag");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("tag.TbTestTag", new tag.TbTestTag(path));
            }
            path = pathFunc("test_tbfulltypes");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbFullTypes", new test.TbFullTypes(path));
            }
            path = pathFunc("test_tbsingleton");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbSingleton", new test.TbSingleton(path));
            }
            path = pathFunc("test_tbnotindexlist");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbNotIndexList", new test.TbNotIndexList(path));
            }
            path = pathFunc("test_tbmultiunionindexlist");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbMultiUnionIndexList", new test.TbMultiUnionIndexList(path));
            }
            path = pathFunc("test_tbmultiindexlist");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbMultiIndexList", new test.TbMultiIndexList(path));
            }
            path = pathFunc("test_tbdatafrommisc");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDataFromMisc", new test.TbDataFromMisc(path));
            }
            path = pathFunc("test_tbmultirowrecord");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbMultiRowRecord", new test.TbMultiRowRecord(path));
            }
            path = pathFunc("test_tbtestmulticolumn");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestMultiColumn", new test.TbTestMultiColumn(path));
            }
            path = pathFunc("test_tbmultirowtitle");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbMultiRowTitle", new test.TbMultiRowTitle(path));
            }
            path = pathFunc("test_tbtestnull");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestNull", new test.TbTestNull(path));
            }
            path = pathFunc("test_tbdemoprimitive");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDemoPrimitive", new test.TbDemoPrimitive(path));
            }
            path = pathFunc("test_tbteststring");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestString", new test.TbTestString(path));
            }
            path = pathFunc("test_tbdemogroup");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDemoGroup", new test.TbDemoGroup(path));
            }
            path = pathFunc("test_tbdemogroup_c");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDemoGroup_C", new test.TbDemoGroup_C(path));
            }
            path = pathFunc("test_tbdemogroup_s");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDemoGroup_S", new test.TbDemoGroup_S(path));
            }
            path = pathFunc("test_tbdemogroup_e");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDemoGroup_E", new test.TbDemoGroup_E(path));
            }
            path = pathFunc("test_tbtestglobal");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestGlobal", new test.TbTestGlobal(path));
            }
            path = pathFunc("test_tbtestberef");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestBeRef", new test.TbTestBeRef(path));
            }
            path = pathFunc("test_tbtestberef2");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestBeRef2", new test.TbTestBeRef2(path));
            }
            path = pathFunc("test_tbtestref");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestRef", new test.TbTestRef(path));
            }
            path = pathFunc("test_tbtestsize");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestSize", new test.TbTestSize(path));
            }
            path = pathFunc("test_tbtestset");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestSet", new test.TbTestSet(path));
            }
            path = pathFunc("test_tbdetectcsvencoding");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDetectCsvEncoding", new test.TbDetectCsvEncoding(path));
            }
            path = pathFunc("test_tbitem2");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbItem2", new test.TbItem2(path));
            }
            path = pathFunc("test_tbtestindex");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestIndex", new test.TbTestIndex(path));
            }
            path = pathFunc("test_tbtestmap");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestMap", new test.TbTestMap(path));
            }
            path = pathFunc("test_tbexcelfromjson");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbExcelFromJson", new test.TbExcelFromJson(path));
            }
            path = pathFunc("test_tbcompositejsontable1");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbCompositeJsonTable1", new test.TbCompositeJsonTable1(path));
            }
            path = pathFunc("test_tbcompositejsontable2");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbCompositeJsonTable2", new test.TbCompositeJsonTable2(path));
            }
            path = pathFunc("test_tbcompositejsontable3");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbCompositeJsonTable3", new test.TbCompositeJsonTable3(path));
            }
            path = pathFunc("test_tbexcelfromjsonmultirow");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbExcelFromJsonMultiRow", new test.TbExcelFromJsonMultiRow(path));
            }
            path = pathFunc("test_tbtestscriptableobject");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestScriptableObject", new test.TbTestScriptableObject(path));
            }
            path = pathFunc("test_tbpath");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbPath", new test.TbPath(path));
            }
            path = pathFunc("test_tbtestmapper");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbTestMapper", new test.TbTestMapper(path));
            }
            path = pathFunc("test_tbdefinefromexcel2");
            if (!string.IsNullOrEmpty(path))
            {
                _tables.Add("test.TbDefineFromExcel2", new test.TbDefineFromExcel2(path));
            }

            _tableNames = new string[]{"æ— "}.Concat(_tables.Keys).ToArray();
            ResolveRef();
        }

        public void SaveAll()
        {
            foreach (var data in _tables)
            {
                if(data.Value.IsLoaded)
                {
                    data.Value.Save();
                }
            }
        }


        private IConfigEditorTable LoadTable(string tableName, bool forceLoad = false)
        {
            if (!_tables.TryGetValue(_currentTable, out var table))
            {
                return null;
            }
            if (forceLoad || !table.IsLoaded)
            {
                table.Load();
            }
            return table;
        }

        public void ReloadAll()
        {
            foreach (var key in _tables.Keys)
            {
                LoadTable(key, true);
            }
        }

        public void OnGUI()
        {
            DrawTopBar();
            DrawTable();
        }

        public void DrawTopBar()
        {
            GUILayout.BeginHorizontal();
            
            var index = System.Array.IndexOf(_tableNames, _currentTable);
            if (index < 0)
            {
                index = 0;
            }
            index = EditorGUILayout.Popup(index, _tableNames, GUILayout.Width(100));
            _currentTable = _tableNames[index];


            if (GUILayout.Button("Save", GUILayout.Width(100)))
            {
                SaveAll();
            }
            GUILayout.EndHorizontal();
            GUILayout.BeginHorizontal();
            ConfigEditorSettings.showComment = GUILayout.Toggle(ConfigEditorSettings.showComment, "Show Comment", GUILayout.Width(120));
            GUILayout.EndHorizontal();
        }

        private void DrawTable()
        {
            var table = LoadTable(_currentTable);
            table?.OnGUI();
        }

        private void ResolveRef()
        {
            foreach (var table in _tables)
            {
                table.Value.ResolveRef(this);
            }
        }
    }
    
}
