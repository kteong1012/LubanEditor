
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.ai
{

public abstract class KeyQueryOperator :  Luban.EditorBeanBase 
{
    public KeyQueryOperator(Action<Luban.EditorBeanBase> setChangeAction = null) 
    {
        _setChangeAction = setChangeAction;
    }
    public abstract string GetTypeStr();

    private int _typeIndex = -1;
    public int TypeIndex
    {
        get => _typeIndex;
        set
        {
            if(_typeIndex == value)
            {
                return;
            }
            _typeIndex = value;
            var obj = Create(Types[value], _setChangeAction);
            _setChangeAction(obj);
        }
    }
    private static string[] Types = new string[]
    {
        "IsSet2",
        "IsNotSet",
        "BinaryOperator",
    };
    private static string[] TypeAlias = new string[]
    {
        "IsSet2",
        "IsNotSet",
        "BinaryOperator",
    };

    public static KeyQueryOperator Create(string type, Action<Luban.EditorBeanBase> setChangeAction)
    {
        switch (type)
        {
            case "ai.IsSet2":   
            case "IsSet2":
            {
                var obj = new ai.IsSet2(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.IsNotSet":   
            case "IsNotSet":
            {
                var obj = new ai.IsNotSet(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.BinaryOperator":   
            case "BinaryOperator":
            {
                var obj = new ai.BinaryOperator(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderKeyQueryOperator(KeyQueryOperator obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        obj.TypeIndex = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
{
    ai.KeyQueryOperator.RenderKeyQueryOperator(this);
}    }
    public static KeyQueryOperator LoadJsonKeyQueryOperator(SimpleJSON.JSONNode _json, Action<Luban.EditorBeanBase> setChangeAction = null)
    {
        string type = _json["$type"];
        KeyQueryOperator obj;
        switch (type)
        {
            case "ai.IsSet2":   
            case "IsSet2":
            {
                obj = new ai.IsSet2(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "IsSet2");
                break;
            }
            case "ai.IsNotSet":   
            case "IsNotSet":
            {
                obj = new ai.IsNotSet(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "IsNotSet");
                break;
            }
            case "ai.BinaryOperator":   
            case "BinaryOperator":
            {
                obj = new ai.BinaryOperator(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "BinaryOperator");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonKeyQueryOperator(KeyQueryOperator _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }


    public override string ToString()
    {
        return "{ "
        + "}";
    }
}

}

