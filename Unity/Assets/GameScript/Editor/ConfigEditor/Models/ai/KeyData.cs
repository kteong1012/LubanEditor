
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;

namespace editor.cfg.ai
{

public abstract class KeyData :  Luban.EditorBeanBase 
{
    public KeyData()
    {
    }
    public abstract string GetTypeStr();

    private int _typeIndex = -1;
    public int TypeIndex
    {
        get => _typeIndex;
        set
        {
            if(_typeIndex == value)
            {
                return;
            }
            _typeIndex = value;
            Instance = Create(Types[value]);
        }
    }
    public KeyData Instance { get; set;}
    public static List<string> Types = new List<string>()
    {
        "ai.FloatKeyData",
        "ai.IntKeyData",
        "ai.StringKeyData",
        "ai.BlackboardKeyData",
    };

    public static KeyData Create(string type)
    {
        switch (type)
        {
            case "ai.FloatKeyData":   
            case "FloatKeyData":return new ai.FloatKeyData();
            case "ai.IntKeyData":   
            case "IntKeyData":return new ai.IntKeyData();
            case "ai.StringKeyData":   
            case "StringKeyData":return new ai.StringKeyData();
            case "ai.BlackboardKeyData":   
            case "BlackboardKeyData":return new ai.BlackboardKeyData();
            default: return null;
        }
    }

    private GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public override void Render()
    {
{
    var __list0 = ai.KeyData.Types.Select(t => new GUIContent(t)).ToArray();
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    if (this == null)
    {
        
        this.TypeIndex = 0;
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
    this.TypeIndex = UnityEditor.EditorGUILayout.Popup(this.TypeIndex, __list0, GUILayout.Width(200));
    UnityEditor.EditorGUILayout.EndHorizontal();
    this.Instance.Render();
    UnityEditor.EditorGUILayout.EndVertical();
}    }

    public static KeyData LoadJsonKeyData(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        KeyData obj;
        switch (type)
        {
            case "ai.FloatKeyData":   
            case "FloatKeyData":obj = new ai.FloatKeyData(); break;
            case "ai.IntKeyData":   
            case "IntKeyData":obj = new ai.IntKeyData(); break;
            case "ai.StringKeyData":   
            case "StringKeyData":obj = new ai.StringKeyData(); break;
            case "ai.BlackboardKeyData":   
            case "BlackboardKeyData":obj = new ai.BlackboardKeyData(); break;
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonKeyData(KeyData _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.Instance.GetTypeStr();
        _obj.Instance.SaveJson((SimpleJSON.JSONObject)_json);
    }


    public override string ToString()
    {
        return "{ "
        + "}";
    }
}

}

