
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;

namespace editor.cfg.ai
{

public sealed class BinaryOperator :  ai.KeyQueryOperator 
{
    public BinaryOperator()
    {
            oper = ai.EOperator.IS_EQUAL_TO;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "ai.BinaryOperator";

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["oper"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { oper = (ai.EOperator)System.Enum.Parse(typeof(ai.EOperator), _fieldJson); } else if(_fieldJson.IsNumber) { oper = (ai.EOperator)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["data"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                data = ai.KeyData.LoadJsonKeyData(_fieldJson);
                var __index0 = ai.KeyData.Types.IndexOf(data.GetTypeStr());
                if (__index0 == -1)
                {
                    throw new SerializationException();
                }
                data.TypeIndex = __index0;
                data.Instance = ai.KeyData.LoadJsonKeyData(_fieldJson);
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["oper"] = new JSONNumber((int)oper);
        }
        {
            if (data == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  ai.KeyData.SaveJsonKeyData(data, __bjson); _json["data"] = __bjson; }
        }
    }

    private GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("oper", "oper"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("oper", ""), GUILayout.Width(100));
}
this.oper = (ai.EOperator)UnityEditor.EditorGUILayout.EnumPopup(this.oper, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("data", "data"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("data", ""), GUILayout.Width(100));
}
{
    var __list1 = ai.KeyData.Types.Select(t => new GUIContent(t)).ToArray();
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    if (this.data == null)
    {
        this.data = new ai.FloatKeyData();
        this.data.TypeIndex = 0;
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
    this.data.TypeIndex = UnityEditor.EditorGUILayout.Popup(this.data.TypeIndex, __list1, GUILayout.Width(200));
    UnityEditor.EditorGUILayout.EndHorizontal();
    this.data.Instance.Render();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }

    public static BinaryOperator LoadJsonBinaryOperator(SimpleJSON.JSONNode _json)
    {
        BinaryOperator obj = new ai.BinaryOperator();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonBinaryOperator(BinaryOperator _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public ai.EOperator oper;
    public ai.KeyData data;

    public override string ToString()
    {
        return "{ "
        + "oper:" + oper + ","
        + "data:" + data + ","
        + "}";
    }
}

}

