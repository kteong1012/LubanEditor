
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.ai
{

public abstract class Service :  ai.Node 
{
    public Service()
    {
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "Service";

    private int _typeIndex = -1;
    private int TypeIndex => _typeIndex;
    private static string[] Types = new string[]
    {
        "UeSetDefaultFocus",
        "ExecuteTimeStatistic",
        "ChooseTarget",
        "KeepFaceTarget",
        "GetOwnerPlayer",
        "UpdateDailyBehaviorProps",
    };
    private static string[] TypeAlias = new string[]
    {
        "UeSetDefaultFocus",
        "ExecuteTimeStatistic",
        "ChooseTarget",
        "KeepFaceTarget",
        "GetOwnerPlayer",
        "UpdateDailyBehaviorProps",
    };

    public new static Service Create(string type)
    {
        switch (type)
        {
            case "ai.UeSetDefaultFocus":   
            case "UeSetDefaultFocus":
            {
                var obj = new ai.UeSetDefaultFocus();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.ExecuteTimeStatistic":   
            case "ExecuteTimeStatistic":
            {
                var obj = new ai.ExecuteTimeStatistic();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.ChooseTarget":   
            case "ChooseTarget":
            {
                var obj = new ai.ChooseTarget();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.KeepFaceTarget":   
            case "KeepFaceTarget":
            {
                var obj = new ai.KeepFaceTarget();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.GetOwnerPlayer":   
            case "GetOwnerPlayer":
            {
                var obj = new ai.GetOwnerPlayer();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UpdateDailyBehaviorProps":   
            case "UpdateDailyBehaviorProps":
            {
                var obj = new ai.UpdateDailyBehaviorProps();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderService(ref Service obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        var index = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        if (obj.TypeIndex != index)
        {
            obj = Create(Types[index]);
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
    }
    public static Service LoadJsonService(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        Service obj;
        switch (type)
        {
            case "ai.UeSetDefaultFocus":   
            case "UeSetDefaultFocus":
            {
                obj = new ai.UeSetDefaultFocus(); 
                obj._typeIndex = Array.IndexOf(Types, "UeSetDefaultFocus");
                break;
            }
            case "ai.ExecuteTimeStatistic":   
            case "ExecuteTimeStatistic":
            {
                obj = new ai.ExecuteTimeStatistic(); 
                obj._typeIndex = Array.IndexOf(Types, "ExecuteTimeStatistic");
                break;
            }
            case "ai.ChooseTarget":   
            case "ChooseTarget":
            {
                obj = new ai.ChooseTarget(); 
                obj._typeIndex = Array.IndexOf(Types, "ChooseTarget");
                break;
            }
            case "ai.KeepFaceTarget":   
            case "KeepFaceTarget":
            {
                obj = new ai.KeepFaceTarget(); 
                obj._typeIndex = Array.IndexOf(Types, "KeepFaceTarget");
                break;
            }
            case "ai.GetOwnerPlayer":   
            case "GetOwnerPlayer":
            {
                obj = new ai.GetOwnerPlayer(); 
                obj._typeIndex = Array.IndexOf(Types, "GetOwnerPlayer");
                break;
            }
            case "ai.UpdateDailyBehaviorProps":   
            case "UpdateDailyBehaviorProps":
            {
                obj = new ai.UpdateDailyBehaviorProps(); 
                obj._typeIndex = Array.IndexOf(Types, "UpdateDailyBehaviorProps");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonService(Service _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }


    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "}";
    }
}

}

