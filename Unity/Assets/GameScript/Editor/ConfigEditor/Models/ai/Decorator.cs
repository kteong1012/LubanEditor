
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.ai
{

public abstract class Decorator :  ai.Node 
{
    public Decorator(Action<Luban.EditorBeanBase> setChangeAction = null)  : base(setChangeAction) 
    {
        _setChangeAction = setChangeAction;
            flowAbortMode = editor.cfg.ai.EFlowAbortMode.NONE;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "Decorator";

    private int _typeIndex = -1;
    public new int TypeIndex
    {
        get => _typeIndex;
        set
        {
            if(_typeIndex == value)
            {
                return;
            }
            _typeIndex = value;
            var obj = Create(Types[value], _setChangeAction);
            _setChangeAction(obj);
        }
    }
    private new static string[] Types = new string[]
    {
        "UeLoop",
        "UeCooldown",
        "UeTimeLimit",
        "UeBlackboard",
        "UeForceSuccess",
        "IsAtLocation",
        "DistanceLessThan",
    };
    private new static string[] TypeAlias = new string[]
    {
        "UeLoop",
        "UeCooldown",
        "UeTimeLimit",
        "UeBlackboard",
        "UeForceSuccess",
        "IsAtLocation",
        "DistanceLessThan",
    };

    public new static Decorator Create(string type, Action<Luban.EditorBeanBase> setChangeAction)
    {
        switch (type)
        {
            case "ai.UeLoop":   
            case "UeLoop":
            {
                var obj = new ai.UeLoop(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UeCooldown":   
            case "UeCooldown":
            {
                var obj = new ai.UeCooldown(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UeTimeLimit":   
            case "UeTimeLimit":
            {
                var obj = new ai.UeTimeLimit(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UeBlackboard":   
            case "UeBlackboard":
            {
                var obj = new ai.UeBlackboard(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UeForceSuccess":   
            case "UeForceSuccess":
            {
                var obj = new ai.UeForceSuccess(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.IsAtLocation":   
            case "IsAtLocation":
            {
                var obj = new ai.IsAtLocation(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.DistanceLessThan":   
            case "DistanceLessThan":
            {
                var obj = new ai.DistanceLessThan(setChangeAction);
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderDecorator(Decorator obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        obj.TypeIndex = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
{
    ai.Decorator.RenderDecorator(this);
}    }
    public static Decorator LoadJsonDecorator(SimpleJSON.JSONNode _json, Action<Luban.EditorBeanBase> setChangeAction = null)
    {
        string type = _json["$type"];
        Decorator obj;
        switch (type)
        {
            case "ai.UeLoop":   
            case "UeLoop":
            {
                obj = new ai.UeLoop(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "UeLoop");
                break;
            }
            case "ai.UeCooldown":   
            case "UeCooldown":
            {
                obj = new ai.UeCooldown(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "UeCooldown");
                break;
            }
            case "ai.UeTimeLimit":   
            case "UeTimeLimit":
            {
                obj = new ai.UeTimeLimit(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "UeTimeLimit");
                break;
            }
            case "ai.UeBlackboard":   
            case "UeBlackboard":
            {
                obj = new ai.UeBlackboard(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "UeBlackboard");
                break;
            }
            case "ai.UeForceSuccess":   
            case "UeForceSuccess":
            {
                obj = new ai.UeForceSuccess(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "UeForceSuccess");
                break;
            }
            case "ai.IsAtLocation":   
            case "IsAtLocation":
            {
                obj = new ai.IsAtLocation(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "IsAtLocation");
                break;
            }
            case "ai.DistanceLessThan":   
            case "DistanceLessThan":
            {
                obj = new ai.DistanceLessThan(setChangeAction); 
                obj._typeIndex = Array.IndexOf(Types, "DistanceLessThan");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDecorator(Decorator _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public editor.cfg.ai.EFlowAbortMode flowAbortMode;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "flowAbortMode:" + flowAbortMode + ","
        + "}";
    }
}

}

