
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.ai
{

public abstract class FlowNode :  ai.Node 
{
    public FlowNode()
    {
            decorators = new System.Collections.Generic.List<editor.cfg.ai.Decorator>();
            services = new System.Collections.Generic.List<editor.cfg.ai.Service>();
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "FlowNode";

    private int _typeIndex = -1;
    public new int TypeIndex
    {
        get => _typeIndex;
        //set
        //{
        //    if(_typeIndex == value)
        //    {
        //        return;
        //    }
        //    _typeIndex = value;
        //    var obj = Create(Types[value]);
        //}
    }
    private new static string[] Types = new string[]
    {
        "Sequence",
        "Selector",
        "SimpleParallel",
        "UeWait",
        "UeWaitBlackboardTime",
        "MoveToTarget",
        "ChooseSkill",
        "MoveToRandomLocation",
        "MoveToLocation",
        "DebugPrint",
    };
    private new static string[] TypeAlias = new string[]
    {
        "Sequence",
        "Selector",
        "SimpleParallel",
        "UeWait",
        "UeWaitBlackboardTime",
        "MoveToTarget",
        "ChooseSkill",
        "MoveToRandomLocation",
        "MoveToLocation",
        "DebugPrint",
    };

    public new static FlowNode Create(string type)
    {
        switch (type)
        {
            case "ai.Sequence":   
            case "Sequence":
            {
                var obj = new ai.Sequence();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.Selector":   
            case "Selector":
            {
                var obj = new ai.Selector();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.SimpleParallel":   
            case "SimpleParallel":
            {
                var obj = new ai.SimpleParallel();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UeWait":   
            case "UeWait":
            {
                var obj = new ai.UeWait();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.UeWaitBlackboardTime":   
            case "UeWaitBlackboardTime":
            {
                var obj = new ai.UeWaitBlackboardTime();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.MoveToTarget":   
            case "MoveToTarget":
            {
                var obj = new ai.MoveToTarget();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.ChooseSkill":   
            case "ChooseSkill":
            {
                var obj = new ai.ChooseSkill();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.MoveToRandomLocation":   
            case "MoveToRandomLocation":
            {
                var obj = new ai.MoveToRandomLocation();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.MoveToLocation":   
            case "MoveToLocation":
            {
                var obj = new ai.MoveToLocation();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "ai.DebugPrint":   
            case "DebugPrint":
            {
                var obj = new ai.DebugPrint();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderFlowNode(ref FlowNode obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        var index = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        if (obj.TypeIndex != index)
        {
            obj = Create(Types[index]);
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
    }
    public static FlowNode LoadJsonFlowNode(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        FlowNode obj;
        switch (type)
        {
            case "ai.Sequence":   
            case "Sequence":
            {
                obj = new ai.Sequence(); 
                obj._typeIndex = Array.IndexOf(Types, "Sequence");
                break;
            }
            case "ai.Selector":   
            case "Selector":
            {
                obj = new ai.Selector(); 
                obj._typeIndex = Array.IndexOf(Types, "Selector");
                break;
            }
            case "ai.SimpleParallel":   
            case "SimpleParallel":
            {
                obj = new ai.SimpleParallel(); 
                obj._typeIndex = Array.IndexOf(Types, "SimpleParallel");
                break;
            }
            case "ai.UeWait":   
            case "UeWait":
            {
                obj = new ai.UeWait(); 
                obj._typeIndex = Array.IndexOf(Types, "UeWait");
                break;
            }
            case "ai.UeWaitBlackboardTime":   
            case "UeWaitBlackboardTime":
            {
                obj = new ai.UeWaitBlackboardTime(); 
                obj._typeIndex = Array.IndexOf(Types, "UeWaitBlackboardTime");
                break;
            }
            case "ai.MoveToTarget":   
            case "MoveToTarget":
            {
                obj = new ai.MoveToTarget(); 
                obj._typeIndex = Array.IndexOf(Types, "MoveToTarget");
                break;
            }
            case "ai.ChooseSkill":   
            case "ChooseSkill":
            {
                obj = new ai.ChooseSkill(); 
                obj._typeIndex = Array.IndexOf(Types, "ChooseSkill");
                break;
            }
            case "ai.MoveToRandomLocation":   
            case "MoveToRandomLocation":
            {
                obj = new ai.MoveToRandomLocation(); 
                obj._typeIndex = Array.IndexOf(Types, "MoveToRandomLocation");
                break;
            }
            case "ai.MoveToLocation":   
            case "MoveToLocation":
            {
                obj = new ai.MoveToLocation(); 
                obj._typeIndex = Array.IndexOf(Types, "MoveToLocation");
                break;
            }
            case "ai.DebugPrint":   
            case "DebugPrint":
            {
                obj = new ai.DebugPrint(); 
                obj._typeIndex = Array.IndexOf(Types, "DebugPrint");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonFlowNode(FlowNode _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public System.Collections.Generic.List<editor.cfg.ai.Decorator> decorators;
    public System.Collections.Generic.List<editor.cfg.ai.Service> services;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "decorators:" + Luban.StringUtil.CollectionToString(decorators) + ","
        + "services:" + Luban.StringUtil.CollectionToString(services) + ","
        + "}";
    }
}

}

