
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace editor.cfg.ai
{

public abstract class Task :  ai.FlowNode 
{
    public Task(Action<Luban.EditorBeanBase> setChangeAction = null)  : base(setChangeAction) 
    {
        _setChangeAction = setChangeAction;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "Task";

    private int _typeIndex = -1;
    public new int TypeIndex
    {
        get => _typeIndex;
        set
        {
            if(_typeIndex == value)
            {
                return;
            }
            _typeIndex = value;
            var obj = Create(Types[value], _setChangeAction);
            _setChangeAction(obj);
        }
    }
    public new static List<string> Types = new List<string>()
    {
        "UeWait",
        "UeWaitBlackboardTime",
        "MoveToTarget",
        "ChooseSkill",
        "MoveToRandomLocation",
        "MoveToLocation",
        "DebugPrint",
    };

    public new static Task Create(string type, Action<Luban.EditorBeanBase> setChangeAction)
    {
        switch (type)
        {
            case "ai.UeWait":   
            case "UeWait":
            {
                var obj = new ai.UeWait(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            case "ai.UeWaitBlackboardTime":   
            case "UeWaitBlackboardTime":
            {
                var obj = new ai.UeWaitBlackboardTime(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            case "ai.MoveToTarget":   
            case "MoveToTarget":
            {
                var obj = new ai.MoveToTarget(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            case "ai.ChooseSkill":   
            case "ChooseSkill":
            {
                var obj = new ai.ChooseSkill(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            case "ai.MoveToRandomLocation":   
            case "MoveToRandomLocation":
            {
                var obj = new ai.MoveToRandomLocation(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            case "ai.MoveToLocation":   
            case "MoveToLocation":
            {
                var obj = new ai.MoveToLocation(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            case "ai.DebugPrint":   
            case "DebugPrint":
            {
                var obj = new ai.DebugPrint(setChangeAction);
                obj._typeIndex = Types.IndexOf(type);
                return obj;
            }
            default: return null;
        }
    }

    private GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public override void Render()
    {
{
    var __list0 = ai.Task.Types.Select(t => new GUIContent(t)).ToArray();
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    if (this == null)
    {
        
        this.TypeIndex = 0;
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
    this.TypeIndex = UnityEditor.EditorGUILayout.Popup(this.TypeIndex, __list0, GUILayout.Width(200));
    UnityEditor.EditorGUILayout.EndHorizontal();
    this?.Render();
    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static Task LoadJsonTask(SimpleJSON.JSONNode _json, Action<Luban.EditorBeanBase> setChangeAction = null)
    {
        string type = _json["$type"];
        Task obj;
        switch (type)
        {
            case "ai.UeWait":   
            case "UeWait":
            {
                obj = new ai.UeWait(setChangeAction); 
                obj._typeIndex = Types.IndexOf("UeWait");
                break;
            }
            case "ai.UeWaitBlackboardTime":   
            case "UeWaitBlackboardTime":
            {
                obj = new ai.UeWaitBlackboardTime(setChangeAction); 
                obj._typeIndex = Types.IndexOf("UeWaitBlackboardTime");
                break;
            }
            case "ai.MoveToTarget":   
            case "MoveToTarget":
            {
                obj = new ai.MoveToTarget(setChangeAction); 
                obj._typeIndex = Types.IndexOf("MoveToTarget");
                break;
            }
            case "ai.ChooseSkill":   
            case "ChooseSkill":
            {
                obj = new ai.ChooseSkill(setChangeAction); 
                obj._typeIndex = Types.IndexOf("ChooseSkill");
                break;
            }
            case "ai.MoveToRandomLocation":   
            case "MoveToRandomLocation":
            {
                obj = new ai.MoveToRandomLocation(setChangeAction); 
                obj._typeIndex = Types.IndexOf("MoveToRandomLocation");
                break;
            }
            case "ai.MoveToLocation":   
            case "MoveToLocation":
            {
                obj = new ai.MoveToLocation(setChangeAction); 
                obj._typeIndex = Types.IndexOf("MoveToLocation");
                break;
            }
            case "ai.DebugPrint":   
            case "DebugPrint":
            {
                obj = new ai.DebugPrint(setChangeAction); 
                obj._typeIndex = Types.IndexOf("DebugPrint");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonTask(Task _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    public bool ignoreRestartSelf;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "nodeName:" + nodeName + ","
        + "decorators:" + Luban.StringUtil.CollectionToString(decorators) + ","
        + "services:" + Luban.StringUtil.CollectionToString(services) + ","
        + "ignoreRestartSelf:" + ignoreRestartSelf + ","
        + "}";
    }
}

}

